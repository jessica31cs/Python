#If the letter is between the given letters, inclusive: The number of letters to count is given by:
#A – E Multiply its numerical value by 2
#F – J Divide its numerical value by 3. Multiply the integer remainder by 5
#K – O Divide its numerical value by 4. Multiply the integer part of the quotient by 8.
#P – T Multiply the sum of the digits of its numerical value by 10
#U- Z Find the largest integer factor of its numerical value less than the value itself. Multiply it by 12.

letters="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
d={}
d2={}
count=1
for letter in letters:
    d[letter]=count
    d2[count]=letter
    count+=1

def prob(alpha):
    num=d[alpha]
    if num in range(1,6):
        return d2[num*2]
    elif num in range(6,11):
        return d2[num%3 * 5]
    elif num in range(11,16):
        return d2[num//4 * 8]
    elif num in range(16,21):
        num1=num//10 #1
        num2=num%10 #6
        summ=(num1+num2)*10 #70
        return d2[summ%26]
    else:
        if num%2 ==0:
            get=(num/2 * 12)% 26
            if get==0:
                return d2[26]
            return d2[get]
        for i in range(num//2,0,-1):
            if num%i == 0:
                return d2[(i * 12)% 26]
